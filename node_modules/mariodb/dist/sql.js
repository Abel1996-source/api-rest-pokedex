"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var SQL = /** @class */ (function () {
    function SQL(context, strings, keys) {
        this.context = context;
        this.strings = strings;
        this.keys = keys;
        if (strings.length !== keys.length + 1)
            throw new Error("Invalid template literal.");
        this.statement = "";
        this.params = [];
        for (var i = 0; i < keys.length; i++) {
            if (keys[i] instanceof SQL) {
                this.statement += strings[i];
                this.statement += keys[i].statement;
                this.params = this.params.concat(keys[i].params);
            }
            else {
                this.statement += strings[i] + "?";
                this.params.push(keys[i]);
            }
        }
        this.statement += strings[keys.length];
        this.statement = this.statement.trim();
    }
    SQL.prototype.append = function (sql) {
        this.statement = this.statement + " " + sql.statement;
        this.params = this.params.concat(sql.params);
    };
    SQL.prototype.prepend = function (sql) {
        this.statement = sql.statement + " " + this.statement;
        this.params = sql.params.concat(this.params);
    };
    SQL.prototype.run = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var ctx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ctx = context || this.context;
                        if (!ctx) return [3 /*break*/, 2];
                        return [4 /*yield*/, ctx.execute(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: throw new Error("Execution context not found.");
                }
            });
        });
    };
    SQL.prototype.rows = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var rows;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.run(context)];
                    case 1:
                        rows = _a.sent();
                        if (!Array.isArray(rows))
                            throw new Error("Method 'rows/row/value' should be used for query statement.");
                        return [2 /*return*/, rows];
                }
            });
        });
    };
    SQL.prototype.row = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var rows;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.rows(context)];
                    case 1:
                        rows = _a.sent();
                        return [2 /*return*/, rows.length === 0 ? null : rows[0]];
                }
            });
        });
    };
    SQL.prototype.value = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var row, vs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.row(context)];
                    case 1:
                        row = _a.sent();
                        vs = lodash_1.values(row);
                        return [2 /*return*/, vs.length === 0 ? null : vs[0]];
                }
            });
        });
    };
    return SQL;
}());
exports.default = SQL;
